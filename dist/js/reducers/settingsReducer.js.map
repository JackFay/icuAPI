{"version":3,"sources":["../../../src/js/reducers/settingsReducer.js"],"names":["reducer","state","notifications","user_id","action","type","console","log","payload","concat","setting_id","Date","now","start_time","end_time","notification_option_id","new","updatedNotifications","map","setting"],"mappings":";;;;;;;;kBAAwBA,O;AAAT,SAASA,OAAT,GAGF;AAAA,QAHmBC,KAGnB,uEAHyB;AAClCC,uBAAe,EADmB;AAElCC,iBAAS;AAFyB,KAGzB;AAAA,QAARC,MAAQ;;;AAET,YAAQA,OAAOC,IAAf;AACE,aAAK,mBAAL;AAAyB;AACnBC,wBAAQC,GAAR,CAAYH,OAAOI,OAAnB;AACA,oCACOP,KADP;AAEIC,mCAAeE,OAAOI,OAF1B;AAGIL,6BAASC,OAAOI,OAAP,CAAeL;AAH5B;AAKH;AACD,aAAK,qBAAL;AAA2B;AACvB,oCACOF,KADP;AAEIC,mCAAeD,MAAMC,aAAN,CAAoBO,MAApB,CAA2B,EAACC,YAAYC,KAAKC,GAAL,EAAb,EAAyBC,YAAY,IAArC,EAA2CC,UAAU,IAArD,EAA2DC,wBAAwB,IAAnF,EAAyFC,KAAK,IAA9F,EAAoGb,SAASF,MAAME,OAAnH,EAA3B;AAFnB;AAIH;AACD,aAAK,oBAAL;AAA0B,aAEzB;AACD,aAAK,qBAAL;AAA2B;AACvB,oBAAMc,uBAAuBhB,MAAMC,aAAN,CAAoBgB,GAApB,CAAwB,mBAAW;AAC5D,wBAAGC,QAAQT,UAAR,IAAsBN,OAAOI,OAAP,CAAeE,UAAxC,EAAmD;AAC/CS,gCAAQJ,sBAAR,GAAiCX,OAAOI,OAAP,CAAeO,sBAAhD;AACAI,gCAAQN,UAAR,GAAqBT,OAAOI,OAAP,CAAeK,UAApC;AACAM,gCAAQL,QAAR,GAAmBV,OAAOI,OAAP,CAAeM,QAAlC;AACA,+BAAOK,OAAP;AACH,qBALD,MAKK;AACD,+BAAOA,OAAP;AACH;AACJ,iBAT4B,CAA7B;AAUA,oCACOlB,KADP;AAEIC,mCAAee;AAFnB;AAIH;AAjCL;;AAoCA,WAAOhB,KAAP;AACH","file":"settingsReducer.js","sourcesContent":["export default function reducer(state={\r\n    notifications: [],\r\n    user_id: null\r\n  }, action) {\r\n\r\n    switch (action.type) {\r\n      case \"GET_NOTIFICATIONS\":{\r\n            console.log(action.payload)\r\n            return{\r\n                ...state,\r\n                notifications: action.payload,\r\n                user_id: action.payload.user_id\r\n            }\r\n        }\r\n        case \"CREATE_NOTIFICATION\":{\r\n            return{\r\n                ...state,\r\n                notifications: state.notifications.concat({setting_id: Date.now(), start_time: null, end_time: null, notification_option_id: null, new: true, user_id: state.user_id})\r\n            }\r\n        }\r\n        case \"SAVE_NOTIFICATIONS\":{\r\n            \r\n        }\r\n        case \"NOTIFICATION_CHANGE\":{\r\n            const updatedNotifications = state.notifications.map(setting => {\r\n                if(setting.setting_id == action.payload.setting_id){\r\n                    setting.notification_option_id = action.payload.notification_option_id\r\n                    setting.start_time = action.payload.start_time\r\n                    setting.end_time = action.payload.end_time\r\n                    return setting\r\n                }else{\r\n                    return setting\r\n                }\r\n            })\r\n            return{\r\n                ...state,\r\n                notifications: updatedNotifications\r\n            }\r\n        }\r\n    }\r\n\r\n    return state\r\n}\r\n"]}